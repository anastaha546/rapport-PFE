@startuml
skinparam classAttributeIconSize 0
skinparam backgroundColor #f8f9fa
skinparam linetype ortho
skinparam minlen 3
skinparam nodesep 80
skinparam ranksep 60
skinparam class {
    BackgroundColor #ffffff
    BorderColor #d1d5db
}

' Central Transaction
class Transaction {
    +UUID id
    +String externalId
    +BigDecimal amount
    +String currency
    +DateTime transactionDateTime
    +String merchantId
    +String mcc
    +String cardScheme
    +String cardProduct
    +String issuerBin
    +String issuerId
    +String acquirerId
}

' Context above Transaction
class TransactionContext {
    +UUID transactionId
    +String issuerCountry
    +String acquirerCountry
    +String merchantCountry
    +String transactionType
    +Boolean cardPresent
    +Boolean crossBorder
    +String channelType
}

' Interchange Fee - Left vertical column
class TransactionInterchangeFee {
    +UUID id
    +UUID transactionId
    +BigDecimal appliedAmount
    +BigDecimal appliedRate
    +BigDecimal appliedPerItemFee
    +String calculationSource
    +DateTime appliedDateTime
}

class InterchangeFeeRule {
    +UUID id
    +String interchangeCode
    +String cardCategory
    +String merchantCategory
    +String transactionType
    +BigDecimal adValoremRate
    +BigDecimal perItemFee
    +BigDecimal capAmount
    +BigDecimal floorAmount
}

class BilateralAgreement {
    +UUID id
    +String issuerId
    +String acquirerId
    +String cardScheme
    +BigDecimal overrideAdValoremRate
    +BigDecimal overridePerItemFee
    +BigDecimal overrideCapAmount
    +Date effectiveDate
    +Date expiryDate
    +Boolean active
}

' Scheme Fee - Right vertical column
class TransactionSchemeFee {
    +UUID id
    +UUID transactionId
    +UUID ruleId
    +String feeType
    +BigDecimal appliedAmount
    +BigDecimal appliedRate
    +DateTime appliedDateTime
}

class SchemeFeeRule {
    +UUID id
    +String feeCode
    +String feeName
    +String cardScheme
    +String eventTrigger
    +String applicabilityCondition
    +Boolean active
}

class SchemeFeeRate {
    +UUID id
    +UUID ruleId
    +String rateType
    +String currency
    +BigDecimal flatAmount
    +BigDecimal percentageRate
    +BigDecimal minimumFee
    +BigDecimal maximumFee
    +Integer tierLevel
    +BigDecimal tierThresholdFrom
    +BigDecimal tierThresholdTo
}

' Enhanced layout control with more separation
TransactionContext -[hidden]down- Transaction
Transaction -[hidden]left- TransactionInterchangeFee
Transaction -[hidden]right- TransactionSchemeFee
TransactionInterchangeFee -[hidden]down- InterchangeFeeRule
InterchangeFeeRule -[hidden]left- BilateralAgreement
TransactionSchemeFee -[hidden]down- SchemeFeeRule
SchemeFeeRule -[hidden]down- SchemeFeeRate

' Relationships with strategic routing to avoid overlaps
Transaction ||--|| TransactionContext : "1" to "1"\nhas

Transaction ||--|| TransactionInterchangeFee : "1" to "0..1"\nhas IC fee

Transaction ||--|| TransactionSchemeFee : "1" to "0..*"\nhas SF fees

TransactionInterchangeFee ||--|| InterchangeFeeRule : "0..*" to "1"\nuses

TransactionInterchangeFee ||..|| BilateralAgreement : "0..*" to "0..1"\nmay use override

TransactionSchemeFee ||--|| SchemeFeeRule : "0..*" to "1"\ncalculated from

SchemeFeeRule ||--|| SchemeFeeRate : "1" to "1..*"\nhas rates

' Strategically positioned notes
note as N1
  **Transaction Context**
  Determines fee applicability
  based on card presence, 
  cross-border status, etc.
end note

note as N2
  **Bilateral Agreement**
  Contains override amounts
  that replace standard IC rates
  when agreement is active
end note

note as N3
  **Scheme Fee Rate**
  Single class handles:
  • Simple rates (flat/percentage)
  • Tiered rates (volume-based)
  rateType field indicates model
end note

note as N4
  **Multiple Scheme Fees**
  One transaction can have
  multiple scheme fees:
  auth, clearing, settlement, etc.
end note

N1 .. TransactionContext
N2 .. BilateralAgreement
N3 .. SchemeFeeRate
N4 .. TransactionSchemeFee

@enduml
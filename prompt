so here is the idea, for the ai/ml components; we start by taking a referential (PDF) for a scheme with its parser, and put it in input folder, the pipeline will discover the parsers, load them and run each one, each parser is expected to give a list of logical fee unit, a logical fee unit is an unstructured text that describe a single fee, and then we pass that to the normalizer which return the fee as a normalized strcutured fee, the normalizer use LLM to return unstructured text to structured one, and we use pydantic + enums to control the output and asserting quality while removing hallucinations; finally after exploding and flattening we calculate the cost code (which is an optimized concatenation of most important values; we have ic_cc and sf_cc) and then we persist stuff; for the auto-discovery part we give the normalized output + original text to the LLM and tell it to detect possible information loss, with reasoning and what is the field that we need to add to our structure to preserve this info

You may notice a part called Enums Dynamic Loading, here we want to stop using statically defined-enums and load them from database, this will allow the users//domain experts to configure possible enums and control the output


############

Now going with the core runtime, here we load the persisted rules from the db (the result of the agents pipeline) cache them, and take real time transactions from bank to calculate IC fees, SF Fees based on transaction input + extracted rules, this uses complex calculation algorithms because we need to fallback in case we don't find a rule; here we are using an innovative cost code mechanism, auth_cc, ic_cc, sf_cc

Our position is in the pre-clearing phase, we take authorization transaction and calculate the auth_cc from the iso20022 transaction input; and after that we already have a mapping db, the monetique domain tells us that each auth_cc have a single ic_cc (we pay a single interchange per transaction), and each auth_cc have at least one sf_cc (one-to-many) this allow for fast mapping from transaction to ic_cc and sf_cc (ic_cc, sf_cc are identifier of rules) after getting rules we calculate the rates
